stages:
  - docker  # create images that are needed by the rest of the build
  - build   # create any outputs of the project (binaries, containers, charts…)
  - test    # all quality checks
  - deploy  # export the outputs (publish to an artifact registry, deploy on a server…)

include:
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/version.gitlab-ci.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/mirror.gitlab-ci.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/gradle.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# region Check

check:
  extends: [ .os.gradle ]
  needs: [ os.version ]
  stage: test

  script:
    - >
      ./gradlew check
      -PappVersion=$project_version

  interruptible: true

example-kotlin:
  extends: [ .os.gradle ]
  needs: [ os.version ]
  stage: test

  script:
    - >
      ./gradlew build run
      -p examples/kotlin --include-build ../..
      -PappVersion=$project_version

  interruptible: true

example-kotlin-documentation:
  extends: [ .os.gradle ]
  needs: [ os.version ]
  stage: test

  script:
    - >
      ./gradlew :dokkatooGenerate
      -p examples/kotlin --include-build ../..
      -PappVersion=$project_version
    - find examples/kotlin/build/dokka
    - test -f examples/kotlin/build/dokka/html/index.html

  artifacts:
    paths:
      - examples/kotlin/build/dokka/html
    expose_as: Kotlin example documentation
  interruptible: true

# endregion
# region Publish

publish:
  extends: [ .os.gradle ]
  needs: [ os.version ]
  stage: deploy

  script:
    - >
      ./gradlew 
      publishAllPublicationsToGitLabRepository
      :versions:publishAllPublicationsToGitLabRepository
      -PappVersion=$project_version

  interruptible: false
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# endregion

mirror-playground:
  stage: deploy
  extends: [ .os.mirror ]
  needs: [ ]

  variables:
    url: "$playground_parent"
    name: "$playground_parent_name"
    key: "$playground_mirroring_key"
    key_public: "$playground_mirroring_key_public"

  rules:
    - if: $playground_parent == null || $playground_parent_name == null
      when: never
    - if: $playground_mirroring_key == null || $playground_mirroring_key_public == null
      when: never
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - when: manual
      allow_failure: true
